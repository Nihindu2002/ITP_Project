import { Editor } from '@tiptap/react';
import { JSX } from 'react/jsx-runtime';

/**
 * Display Editor - Read-only editor for displaying content
 *
 * Features:
 * - All content types supported for display
 * - No editing capabilities
 * - No toolbar
 */
export declare function DisplayEditor(props: EditorVariantProps): JSX.Element;

/**
 * Complete editor configuration
 */
export declare interface EditorConfig {
    /** Feature configuration */
    features?: EditorFeatures;
    /** UI configuration */
    ui?: EditorUI;
    /** Initial content */
    content?: any;
    /** Custom CSS class */
    className?: string;
    /** Placeholder text */
    placeholder?: string;
    /** Whether the editor is editable */
    editable?: boolean;
    /** Maximum file size for uploads (in bytes) */
    maxFileSize?: number;
    /** Image upload handler */
    onImageUpload?: (file: File) => Promise<string>;
    /** Change handler */
    onChange?: (content: any) => void;
    /** Editor instance callback */
    onEditor?: (editor: Editor) => void;
}

/**
 * Configuration for editor features
 */
export declare interface EditorFeatures {
    /**
     * Text formatting options
     */
    formatting?: {
        [key in MarkType]?: boolean;
    };
    /**
     * Block-level elements
     */
    blocks?: {
        /** Available heading levels (e.g., [1, 2, 3] for h1-h3) */
        headings?: HeadingLevel[];
        /** Available list types */
        lists?: ListType[];
        /** Enable blockquote */
        blockquote?: boolean;
        /** Enable code blocks */
        codeBlock?: boolean;
        /** Enable horizontal rule */
        horizontalRule?: boolean;
        /** Enable page break */
        pageBreak?: boolean;
    };
    /**
     * Media and embeds
     */
    media?: {
        /** Enable basic image insertion */
        images?: boolean;
        /** Enable image upload functionality */
        imageUpload?: boolean;
    };
    /**
     * Text alignment options
     */
    alignment?: {
        /** Available alignment options */
        types?: TextAlignType[];
    };
    /**
     * Text highlighting
     */
    highlighting?: boolean;
    /**
     * Link functionality
     */
    links?: boolean;
    /**
     * Table functionality
     */
    tables?: boolean;
    /**
     * Undo/Redo functionality
     */
    undoRedo?: boolean;
    /**
     * Table of contents functionality
     */
    tableOfContents?: boolean;
    /**
     * Text color and size options
     */
    textColor?: boolean;
    textSize?: boolean;
}

/**
 * UI configuration options
 */
export declare interface EditorUI {
    /** Show/hide toolbar */
    toolbar?: boolean;
    /** Toolbar position */
    toolbarPosition?: 'top' | 'bottom' | 'floating';
    /** Theme configuration */
    theme?: 'light' | 'dark' | 'auto';
    /** Enable theme toggle button */
    themeToggle?: boolean;
}

/**
 * Props for specialized editor variants (excludes config)
 */
export declare interface EditorVariantProps extends Omit<EditorConfig, 'features' | 'ui'> {
    /** Override specific features for this instance */
    features?: Partial<EditorFeatures>;
    /** Override specific UI options for this instance */
    ui?: Partial<EditorUI>;
}

/**
 * Full Editor - Full-featured editor for writing blog posts and articles
 *
 * Features:
 * - All formatting options (bold, italic, underline, strikethrough, code, super/subscript)
 * - All heading levels (H1-H6)
 * - All list types (bullet, ordered, task lists)
 * - Block elements (blockquote, code blocks)
 * - Media (images, image upload)
 * - Text alignment
 * - Highlighting and links
 * - Tables for complex layouts
 */
export declare function FullEditor(props: EditorVariantProps): JSX.Element;

export declare type HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6;

export declare type ListType = 'bulletList' | 'orderedList' | 'taskList';

export declare type MarkType = 'bold' | 'italic' | 'underline' | 'strike' | 'code' | 'superscript' | 'subscript';

/**
 * Minimal editor - A very basic editor for comments and simple text input
 *
 * Features:
 * - Basic formatting (bold, italic)
 * - Simple lists (bullet only)
 * - Links
 * - No headings, no media, no advanced features
 */
export declare function MinimalEditor(props: EditorVariantProps): JSX.Element;

export declare function PostedinEditor({ config }: PostedinEditorProps): JSX.Element;

/**
 * Props for the base PostedinEditor component
 */
export declare interface PostedinEditorProps {
    config: EditorConfig;
}

/**
 * Standard Editor - Medium-featured editor for page sections and content blocks
 *
 * Features:
 * - Basic formatting (bold, italic, strikethrough)
 * - Limited headings (H2-H4)
 * - Basic lists (bullet, ordered)
 * - Images (but no upload)
 * - Links
 * - Basic alignment
 */
export declare function StandardEditor(props: EditorVariantProps): JSX.Element;

export declare type TextAlignType = 'left' | 'center' | 'right' | 'justify';

export { }


declare module '@tiptap/core' {
    interface Commands<ReturnType> {
        fontSize: {
            /**
             * Set the font size
             */
            setFontSize: (size: string) => ReturnType;
            /**
             * Unset the font size
             */
            unsetFontSize: () => ReturnType;
        };
    }
}


declare module '@tiptap/react' {
    interface Commands<ReturnType> {
        imageUpload: {
            setImageUploadNode: (options?: ImageUploadNodeOptions) => ReturnType;
        };
    }
}


declare module '@tiptap/core' {
    interface Commands<ReturnType> {
        tableOfContents: {
            /**
             * Insert a table of contents
             */
            insertTableOfContents: () => ReturnType;
        };
    }
}


declare module '@tiptap/core' {
    interface Commands<ReturnType> {
        pageBreak: {
            /**
             * Insert a page break
             */
            insertPageBreak: () => ReturnType;
        };
    }
}
